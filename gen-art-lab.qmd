---
title: "Generative Art Lab"
format: html
editor: visual
self-contained: true
---

# Preface

The original functions adapted for usage in my art pieces can be found in the following posts by Danielle Navarro:

[https://art-from-code.netlify.app/day-1/session-1/](https://art-from-code.netlify.app/day-1/session-1/)

[https://art-from-code.netlify.app/day-1/session-4/](https://art-from-code.netlify.app/day-1/session-4/)




# Load packages

```{r}
#| message: false
library(rayshader)
library(tibble)
library(ambient)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(tictoc)
library(dplyr)
library(scales)
```

# Art Piece One

```{r}
#| fig-cap: "Pupil of the Iris"
iris %>% 
  ggplot(
    aes(
      x = Sepal.Width,
      y = Petal.Width,
      xend = Sepal.Length,
      yend = Petal.Length,
      color = Petal.Width,
      linewidth = Sepal.Length
      
    )
  ) +
  scale_linewidth(range = c(0.5, 1)) +
  coord_polar(clip = "off") +
  geom_segment() +
  guides(
      color = guide_none(),
      linewidth = guide_none(),
      fill = guide_none(),
      shape = guide_none()
    ) +
  theme_void() +
  
  # The colors chosen for this palette were sampled from real images of each iris species
  scale_color_gradient2(
    low = "#7251dd",
    mid = "#9159c3",
    high = "#cecafc"
  ) 
```



The colors used to create the gradient for this piece were sampled from real images of the different iris species: virginica, setosa, and versicolor. The different clusters of lines and colors roughly correspond to the different species of flower. 

The choice to use polar coordinates for this plot is what gives the design its signature spiral. The individual segments have differing lengths according to the ratio between the sepal and petal widths and lengths. The lines also appear string-like because I limited the range of the linewidths to between only 0.5 and 1. 



# Art Piece Two

## Iteration One

```{r}
is_within_circle <- function(x_coord, y_coord, x_center, y_center, radius) {
  (x_coord - x_center)^2 + (y_coord - y_center)^2 < radius^2
}

additive_circles <- function(n = 5, pixels = 1000, seed = NULL) {
  
  if(!is.null(seed)) set.seed(seed)
  
  # setup canvas
  art <- long_grid(
    x = seq(0, 1, length.out = pixels),
    y = seq(0, 1, length.out = pixels)
  )
  art$paint <- 0
  
  for(i in 1:n) {
    
    # sample a random circle
    x_center <- rnorm(1, mean = 0.5, sd = 0.1)
    y_center <- abs(x_center - 0.5) * -0.1 + 0.2 
    radius <- runif(1, min = .05, max = .10)
    
    # add +1 to all points inside the circle
    art <- art |>
      mutate(
        paint = paint + is_within_circle(
          x, y, x_center, y_center, radius
        )
      )
  }
  
  # normalise paint to [0, 1] range and return
  art$paint <- normalise(art$paint)
  return(art)
}
```

```{r}
circle_art <- additive_circles(n = 50, pixels = 2000, seed = 13)


ggplot(circle_art, aes(x, y, fill = paint)) +
  geom_raster(show.legend = FALSE) + 
  theme_void()
```

## Iteration Two

```{r}
circle_array <- circle_art |>
  as.array(value = paint) 

circle_shadow <- ray_shade(
  heightmap = circle_array,
  sunaltitude = 5, 
  sunangle = 270,
  zscale = .01,
  multicore = TRUE
)

plot_map(circle_shadow, rotate = 270)
```

## Final Piece

```{r}
#| fig-cap: "Peak Normality"
circle_scape <- circle_array |> 
  height_shade() |>
  add_shadow(
    shadowmap = circle_shadow,
    max_darken = .1
  )

plot_map(circle_scape, rotate = 270)
```



The shadow of this randomly generated mountain follows a roughly bell-shaped curve, with imperfections due to indeterminism in the size of the circles and the sampling variability of the points generated from the normal distribution. 

I generated 50 unique circles, each with its own x and y coordinate. The x-values were randomly generated from a normal distribution, which is why we see an approximate bell curve as the shadow of the mountain. The y-values are a function of the x-values, with larger y-values associated with the middle x-values and smaller y-values trailing off left and right. Then, the number of overlapping circles on a given point determines the height of the mountain at that point. As such, the mountain is taller near the mean of the generated x-values (where there are more overlapping circles), and gets shorter near the x-values far from the mean. 
